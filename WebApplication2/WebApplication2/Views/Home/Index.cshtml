@using Syncfusion.JavaScript.DataVisualization
@using Syncfusion.JavaScript.Models
@using WebApplication2.Controllers
@using Syncfusion.JavaScript
@using Syncfusion.MVC.EJ

@{
    ViewBag.Title = "Circular Gauge";
}

<h2>Circular Gauge</h2>
<h2>
   Gauge Pointer after row selection: <label id="totalSum" />
</h2>
<div style="float:left;width:300px;height:250px;">
    @(Html.EJ().Grid<object>("Invoice")
           .AllowPaging(true)
          .ClientSideEvents(c => c.RowSelected("rowSelect"))
          .Datasource((IEnumerable<object>)ViewBag.InvoiceData)
    )
</div>
<div style="float:left;width:300px;height:450px;">
    @(Html.EJ().Grid<object>("Payment")
           .AllowPaging(true)
          .Datasource((IEnumerable<object>)ViewBag.PaymentData)
    )
</div>

<div style="width:300px;height:400px;float:right;">
    @(Html.EJ().CircularGauge("circulargauge1")
      .IsResponsive(true)
                .BackgroundColor("transparent")
                    .ClientSideEvents(cli => cli.Load("loadGaugeTheme"))
                .Scales(sc =>
                {
                    sc.Radius(130)
                    .PointerCap(cap => cap.Radius(10))
                    .Minimum(0)
                    .MajorIntervalValue(1000)
                    .MinorIntervalValue(500)
                    .Maximum(20000)
                    .ShowScaleBar(true)
                    .Size(1)
                    .ShowRanges(true)
                    .Ranges(ran =>
                    {
                        ran.Size(5).DistanceFromScale(-30).StartValue(0).EndValue(7000).Add();
                        ran.Size(5).DistanceFromScale(-30).StartValue(7000).EndValue(14000).BackgroundColor(ConsoleColor.Red.ToString()).Border(bor => bor.Color(ConsoleColor.Red.ToString())).Add();
                        ran.Size(5).DistanceFromScale(-30).StartValue(14000).EndValue(20000).BackgroundColor(ConsoleColor.Yellow.ToString()).Border(bor => bor.Color(ConsoleColor.Yellow.ToString())).Add();
                    })
                    .Pointers(po =>
                    {
                        po.Value(10000)
                        .Length(90)
                        .Width(8)
                        .ShowBackNeedle(true)
                        .BackNeedleLength(15).Add();
                    }).Add();
                })
    )
</div>
<script type="text/javascript">
    var intialData;
    function rowSelect(sender) {
        var grid = $("#Payment").ejGrid("instance");
        var gauge = $("#circulargauge1").ejCircularGauge("instance");
        var newGridData = [];
        if (intialData == undefined) {
            intialData = grid.model.dataSource;
        }
        var totalPayment = 0;
        for (var i = 0; i < intialData.length; i++) {
            if (sender.data.Customer_ID == intialData[i].Customer_ID) {
                totalPayment += intialData[i].Payment;
                newGridData.push({ Customer_ID: intialData[i].Customer_ID, Payment: intialData[i].Payment });
            }
        }
        grid.dataSource(newGridData);
        gauge.setPointerValue(0, 0, totalPayment);
        $("#totalSum").text(totalPayment);
    }
</script>
